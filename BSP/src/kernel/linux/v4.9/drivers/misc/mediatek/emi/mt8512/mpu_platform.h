/*
 * Copyright (C) 2015 MediaTek Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 */

#ifndef __MPU_PLATFORM_H__
#define __MPU_PLATFORM_H__

enum {
	MT8512_M0_AXI_MST_CORE_NN_SYSTEM,
	MT8512_M0_AXI_MST_CORE_NN_BARRIER,
	MT8512_M0_AXI_MST_UNUSED,
	MT8512_M0_AXI_MST_SCU,
	MT8512_M0_AXI_MST_CORE_NN_NO_REORDER,
	MT8512_M0_AXI_MST_MM_OR_REORDER,
	MT8512_M0_AXI_MST_MCSIA,
	MT8512_M0_AXI_MST_CORE_NN_EXCLUSIVE,
	MT8512_M0_AXI_MST_SCU_OR_DVM,
	MT8512_M0_AXI_MST_ACP,
	MT8512_M0_AXI_MST_CORE_NN,
	MT8512_M2_AXI_MST_LARB1_MDP_RDMA0,
	MT8512_M2_AXI_MST_LARB1_MDP_WROT0,
	MT8512_M2_AXI_MST_LARB1_DISP_OVL0_2L,
	MT8512_M2_AXI_MST_LARB1_DISP_WDMA0,
	MT8512_M2_AXI_MST_LARB1_JPEG_DEC_BITS_RO,
	MT8512_M2_AXI_MST_LARB1_JPEG_DEC_WINFT_WO,
	MT8512_M2_AXI_MST_LARB1_JPEG_DEC_NZ_WR,
	MT8512_M2_AXI_MST_LARB1_JPEG_DEC_MEM_COEFF_RO,
	MT8512_M2_AXI_MST_LARB1_IMGRZ_BITS,
	MT8512_M2_AXI_MST_LARB1_IMGRZ_PLD,
	MT8512_M2_AXI_MST_LARB1_IMGRZ_WR,
	MT8512_M2_AXI_MST_LARB1_PNG_LZ77W_REQ,
	MT8512_M2_AXI_MST_LARB1_PNG_LNBFW_REQ,
	MT8512_M2_AXI_MST_LARB1_PNG_LZ77R_REQ,
	MT8512_M2_AXI_MST_LARB1_PNG_LNBFR_REQ,
	MT8512_M2_AXI_MST_LARB1_PNG_PAR_REQ,
	MT8512_M2_AXI_MST_LARB1_PNG_PELOUT_GREQ,
	MT8512_M2_AXI_MST_LARB1_DISP_FAKE,
	MT8512_M2_AXI_MST_LARB0_WF_LUT_RDMA,
	MT8512_M2_AXI_MST_LARB0_WF_LUT_0,
	MT8512_M2_AXI_MST_LARB0_WF_LUT_1,
	MT8512_M2_AXI_MST_LARB0_WF_LUT_2,
	MT8512_M2_AXI_MST_LARB0_WF_LUT_3,
	MT8512_M2_AXI_MST_LARB0_UPD_BUF_RDMA,
	MT8512_M2_AXI_MST_LARB0_WB_BUF_RDMA,
	MT8512_M2_AXI_MST_LARB0_PIPELINE_WDMA,
	MT8512_M2_AXI_MST_LARB0_DISP_RDMA0,
	MT8512_M2_AXI_MST_LARB0_DISP_FAKE,
	MT8512_M3_AXI_MST_DSP,
	MT8512_M6_AXI_MST_NNA0,
	MT8512_M7_AXI_MST_NNA1,
	MT8512_M7_AXI_MST_WFST,
	MST_INVALID,
	NR_MST
};

enum {
	MST_TYPE_WRITE = 1,
	MST_TYPE_READ,
	MST_TYPE_BOTH_READ_WRITE
};

static const struct mst_tbl_entry mst_tbl[] = {
	{.master = MT8512_M0_AXI_MST_CORE_NN_SYSTEM,
		.port = 0,
		.id_mask = 0x1FE7,
		.id_val = 0x4,
		.type_wr = MST_TYPE_WRITE,
		.note = "Core nn system domain store exclusive",
		.name = "MT8512_M0_AXI_MST_CORE_NN_SYSTEM"},
	{.master = MT8512_M0_AXI_MST_CORE_NN_BARRIER,
		.port = 0,
		.id_mask = 0x1FE7,
		.id_val = 0x24,
		.type_wr = MST_TYPE_WRITE,
		.note = "Core nn barrier",
		.name = "MT8512_M0_AXI_MST_CORE_NN_BARRIER"},
	{.master = MT8512_M0_AXI_MST_UNUSED,
		.port = 0,
		.id_mask = 0x1FFF,
		.id_val = 0x44,
		.type_wr = MST_TYPE_WRITE,
		.note = "Unused",
		.name = "MT8512_M0_AXI_MST_UNUSED"},
	{.master = MT8512_M0_AXI_MST_SCU,
		.port = 0,
		.id_mask = 0x1FFF,
		.id_val = 0x4C,
		.type_wr = MST_TYPE_WRITE,
		.note = "SCU generated barrier",
		.name = "MT8512_M0_AXI_MST_SCU"},
	{.master = MT8512_M0_AXI_MST_UNUSED,
		.port = 0,
		.id_mask = 0x1FF7,
		.id_val = 0x54,
		.type_wr = MST_TYPE_WRITE,
		.note = "Unused",
		.name = "MT8512_M0_AXI_MST_UNUSED"},
	{.master = MT8512_M0_AXI_MST_CORE_NN_NO_REORDER,
		.port = 0,
		.id_mask = 0x1FE7,
		.id_val = 0x64,
		.type_wr = MST_TYPE_WRITE,
		.note = "Core nn non-re-orderable device write",
		.name = "MT8512_M0_AXI_MST_CORE_NN_NO_REORDER"},
	{.master = MT8512_M0_AXI_MST_MM_OR_REORDER,
		.port = 0,
		.id_mask = 0x1F87,
		.id_val = 0x84,
		.type_wr = MST_TYPE_WRITE,
		.note = "Write to normal memory or re-orderable device memory",
		.name = "MT8512_M0_AXI_MST_MM_OR_REORDER"},
	{.master = MT8512_M0_AXI_MST_MCSIA,
		.port = 0,
		.id_mask = 0x1F07,
		.id_val = 0x7,
		.type_wr = MST_TYPE_WRITE,
		.note = "Write-back that th MCSIA generates",
		.name = "MT8512_M0_AXI_MST_MCSIA"},
	{.master = MT8512_M0_AXI_MST_CORE_NN_EXCLUSIVE,
		.port = 0,
		.id_mask = 0x1FE7,
		.id_val = 0x4,
		.type_wr = MST_TYPE_READ,
		.note = "Core nn exclusive read or non-reorderable device read",
		.name = "MT8512_M0_AXI_MST_CORE_NN_EXCLUSIVE"},
	{.master = MT8512_M0_AXI_MST_CORE_NN_BARRIER,
		.port = 0,
		.id_mask = 0x1FE7,
		.id_val = 0x24,
		.type_wr = MST_TYPE_READ,
		.note = "Core nn barrier",
		.name = "MT8512_M0_AXI_MST_CORE_NN_BARRIER"},
	{.master = MT8512_M0_AXI_MST_UNUSED,
		.port = 0,
		.id_mask = 0x1FFF,
		.id_val = 0x44,
		.type_wr = MST_TYPE_READ,
		.note = "Unused",
		.name = "MT8512_M0_AXI_MST_UNUSED"},
	{.master = MT8512_M0_AXI_MST_SCU_OR_DVM,
		.port = 0,
		.id_mask = 0x1FFF,
		.id_val = 0x4C,
		.type_wr = MST_TYPE_READ,
		.note = "SCU generated barrier or DVM complete",
		.name = "MT8512_M0_AXI_MST_SCU_OR_DVM"},
	{.master = MT8512_M0_AXI_MST_UNUSED,
		.port = 0,
		.id_mask = 0x1FF7,
		.id_val = 0x54,
		.type_wr = MST_TYPE_READ,
		.note = "Unused",
		.name = "MT8512_M0_AXI_MST_UNUSED"},
	{.master = MT8512_M0_AXI_MST_UNUSED,
		.port = 0,
		.id_mask = 0x1FE7,
		.id_val = 0x64,
		.type_wr = MST_TYPE_READ,
		.note = "Unused",
		.name = "MT8512_M0_AXI_MST_UNUSED"},
	{.master = MT8512_M0_AXI_MST_ACP,
		.port = 0,
		.id_mask = 0x1F9F,
		.id_val = 0x84,
		.type_wr = MST_TYPE_READ,
		.note = "ACP read",
		.name = "MT8512_M0_AXI_MST_ACP"},
	{.master = MT8512_M0_AXI_MST_UNUSED,
		.port = 0,
		.id_mask = 0x1F9F,
		.id_val = 0x8C,
		.type_wr = MST_TYPE_READ,
		.note = "Unused",
		.name = "MT8512_M0_AXI_MST_UNUSED"},
	{.master = MT8512_M0_AXI_MST_UNUSED,
		.port = 0,
		.id_mask = 0x1F97,
		.id_val = 0x94,
		.type_wr = MST_TYPE_READ,
		.note = "Unused",
		.name = "MT8512_M0_AXI_MST_UNUSED"},
	{.master = MT8512_M0_AXI_MST_CORE_NN,
		.port = 0,
		.id_mask = 0x1F07,
		.id_val = 0x104,
		.type_wr = MST_TYPE_READ,
		.note = "Core nn read",
		.name = "MT8512_M0_AXI_MST_CORE_NN"},
	{.master = MT8512_M3_AXI_MST_DSP,
		.port = 3,
		.id_mask = 0x1FF0,
		.id_val = 0x0,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "DSP",
		.name = "MT8512_M3_AXI_MST_DSP"},
	{.master = MT8512_M6_AXI_MST_NNA0,
		.port = 6,
		.id_mask = 0x1FFF,
		.id_val = 0x0,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "NNA0",
		.name = "MT8512_M6_AXI_MST_NNA0"},
	{.master = MT8512_M7_AXI_MST_WFST,
		.port = 7,
		.id_mask = 0x1FFF,
		.id_val = 0x0,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "WFST",
		.name = "MT8512_M7_AXI_MST_WFST"},
	{.master = MT8512_M7_AXI_MST_NNA1,
		.port = 7,
		.id_mask = 0x1FFF,
		.id_val = 0x1,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "NNA1",
		.name = "MT8512_M7_AXI_MST_NNA1"},
	{.master = MT8512_M2_AXI_MST_LARB1_MDP_RDMA0,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x100,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "mdp_rdma0",
		.name = "MT8512_M2_AXI_MST_LARB1_MDP_RDMA0"},
	{.master = MT8512_M2_AXI_MST_LARB1_MDP_WROT0,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x104,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "mdp_wrot0",
		.name = "MT8512_M2_AXI_MST_LARB1_MDP_WROT0"},
	{.master = MT8512_M2_AXI_MST_LARB1_DISP_OVL0_2L,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x108,
		.note = "disp_ovl0_2l",
		.name = "MT8512_M2_AXI_MST_LARB1_DISP_OVL0_2L"},
	{.master = MT8512_M2_AXI_MST_LARB1_DISP_WDMA0,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x10c,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "disp_wdma0",
		.name = "MT8512_M2_AXI_MST_LARB1_DISP_WDMA0"},
	{.master = MT8512_M2_AXI_MST_LARB1_JPEG_DEC_BITS_RO,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x110,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "jpeg_dec_bits_ro",
		.name = "MT8512_M2_AXI_MST_LARB1_JPEG_DEC_BITS_RO"},
	{.master = MT8512_M2_AXI_MST_LARB1_JPEG_DEC_WINFT_WO,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x114,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "jpeg_dec_winft_wo",
		.name = "MT8512_M2_AXI_MST_LARB1_JPEG_DEC_WINFT_WO"},
	{.master = MT8512_M2_AXI_MST_LARB1_JPEG_DEC_NZ_WR,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x118,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "jpeg_dec_nz_wr",
		.name = "MT8512_M2_AXI_MST_LARB1_JPEG_DEC_NZ_WR"},
	{.master = MT8512_M2_AXI_MST_LARB1_JPEG_DEC_MEM_COEFF_RO,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x11c,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "jpeg_dec_mem_coeff_ro",
		.name = "MT8512_M2_AXI_MST_LARB1_JPEG_DEC_MEM_COEFF_RO"},
	{.master = MT8512_M2_AXI_MST_LARB1_IMGRZ_BITS,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x120,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "imgrz_bits",
		.name = "MT8512_M2_AXI_MST_LARB1_IMGRZ_BITS"},
	{.master = MT8512_M2_AXI_MST_LARB1_IMGRZ_PLD,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x124,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "imgrz_pld",
		.name = "MT8512_M2_AXI_MST_LARB1_IMGRZ_PLD"},
	{.master = MT8512_M2_AXI_MST_LARB1_IMGRZ_WR,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x128,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "imgrz_wr",
		.name = "MT8512_M2_AXI_MST_LARB1_IMGRZ_WR"},
	{.master = MT8512_M2_AXI_MST_LARB1_PNG_LZ77W_REQ,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x12c,
		.note = "png_lz77w_req",
		.name = "MT8512_M2_AXI_MST_LARB1_PNG_LZ77W_REQ"},
	{.master = MT8512_M2_AXI_MST_LARB1_PNG_LNBFW_REQ,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x130,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "png_lnbfw_req",
		.name = "MT8512_M2_AXI_MST_LARB1_PNG_LNBFW_REQ"},
	{.master = MT8512_M2_AXI_MST_LARB1_PNG_LZ77R_REQ,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x134,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "png_lz77r_req",
		.name = "MT8512_M2_AXI_MST_LARB1_PNG_LZ77R_REQ"},
	{.master = MT8512_M2_AXI_MST_LARB1_PNG_LNBFR_REQ,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x138,
		.note = "png_lnbfr_req",
		.name = "MT8512_M2_AXI_MST_LARB1_PNG_LNBFR_REQ"},
	{.master = MT8512_M2_AXI_MST_LARB1_PNG_PAR_REQ,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x13c,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "png_par_req",
		.name = "MT8512_M2_AXI_MST_LARB1_PNG_PAR_REQ"},
	{.master = MT8512_M2_AXI_MST_LARB1_PNG_PELOUT_GREQ,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x140,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "png_pelout_greq",
		.name = "MT8512_M2_AXI_MST_LARB1_PNG_PELOUT_GREQ"},
	{.master = MT8512_M2_AXI_MST_LARB1_DISP_FAKE,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x144,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "disp_fake",
		.name = "MT8512_M2_AXI_MST_LARB1_DISP_FAKE"},
	{.master = MT8512_M2_AXI_MST_LARB0_WF_LUT_RDMA,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x0,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "wf_lut_rdma",
		.name = "MT8512_M2_AXI_MST_LARB0_WF_LUT_RDMA"},
	{.master = MT8512_M2_AXI_MST_LARB0_WF_LUT_0,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x4,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "wf_lut_0",
		.name = "MT8512_M2_AXI_MST_LARB0_WF_LUT_0"},
	{.master = MT8512_M2_AXI_MST_LARB0_WF_LUT_1,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x8,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "wf_lut_1",
		.name = "MT8512_M2_AXI_MST_LARB0_WF_LUT_1"},
	{.master = MT8512_M2_AXI_MST_LARB0_WF_LUT_2,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0xC,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "wf_lut_2",
		.name = "MT8512_M2_AXI_MST_LARB0_WF_LUT_2"},
	{.master = MT8512_M2_AXI_MST_LARB0_WF_LUT_3,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x10,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "wf_lut_3",
		.name = "MT8512_M2_AXI_MST_LARB0_WF_LUT_3"},
	{.master = MT8512_M2_AXI_MST_LARB0_UPD_BUF_RDMA,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x14,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "upd_buf_rdma",
		.name = "MT8512_M2_AXI_MST_LARB0_UPD_BUF_RDMA"},
	{.master = MT8512_M2_AXI_MST_LARB0_WB_BUF_RDMA,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x18,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "wb_buf_rdma",
		.name = "MT8512_M2_AXI_MST_LARB0_WB_BUF_RDMA"},
	{.master = MT8512_M2_AXI_MST_LARB0_PIPELINE_WDMA,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x1c,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "pipeline_wdma",
		.name = "MT8512_M2_AXI_MST_LARB0_PIPELINE_WDMA"},
	{.master = MT8512_M2_AXI_MST_LARB0_DISP_RDMA0,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x20,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "disp_rdma0",
		.name = "MT8512_M2_AXI_MST_LARB0_DISP_RDMA0"},
	{.master = MT8512_M2_AXI_MST_LARB0_DISP_FAKE,
		.port = 2,
		.id_mask = 0x7FC,
		.id_val = 0x24,
		.type_wr = MST_TYPE_BOTH_READ_WRITE,
		.note = "disp_fake",
		.name = "MT8512_M2_AXI_MST_LARB0_DISP_FAKE"}
};

#endif /* __MPU_PLATFORM_H__ */
