#
#  Copyright (C) 2015 Google, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at:
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

declare_args() {
  mtk_include_path = ""
  bluedroid_hci_include_path = ""
  libhw_include_path = ""
  nvram_include_path = ""
  cutils_include_path = ""
  sysprop_include_path = ""
  external_include_for_vendor_path = ""

  chip_flag = ""
  bdaddr_flag = ""
  c4a_flag = ""
  nvram_flag = ""
  cutils_link = ""
  file_op_link = ""
  nvram_custom_link = ""
  nvram_link = ""
  bt_sys_log_flag = ""
  rpc_dbg_flag = ""
  merge_interface = ""
  usb_udc_type = ""
}

assert(mtk_include_path != "", "mtk_include_path build argument wasn't provided.")
assert(bluedroid_hci_include_path != "", "bluedroid_hci_include_path build argument wasn't provided.")

assert(nvram_include_path != "", "nvram_include_path build argument wasn't provided.")
assert(cutils_include_path != "", "cutils_include_path build argument wasn't provided.")
assert(sysprop_include_path != "", "sysprop_include_path build argument wasn't provided.")
assert(external_include_for_vendor_path != "", "external_include_for_vendor_path build argument wasn't provided.")

assert(chip_flag != "", "chip_flag build argument wasn't provided.")

config("default_include_dirs") {
  include_dirs = [
    mtk_include_path,
    bluedroid_hci_include_path,
    libhw_include_path,
    nvram_include_path,
    cutils_include_path,
    sysprop_include_path,
    external_include_for_vendor_path,
  ]
}

config("linux") {
  # TODO(keybuk): AndroidConfig.h or equivalent

  cflags = [
    "-Wall",
    #"-Werror",
    "-g",
    "-O0",
    "-fpic",
    "-fdata-sections",
    "-ffunction-sections",
    "-fvisibility=hidden",
    "-DHAS_MDROID_BUILDCFG",
    "-DMTK_BLUEDROID_PATCH",
    chip_flag,
    bdaddr_flag,
    c4a_flag,
    nvram_flag,
    bt_sys_log_flag,
    rpc_dbg_flag,
    merge_interface,
    usb_udc_type,
  ]

  cflags_c = [ "-std=c99" ]

  cflags_cc = [
#TODO(jpawlowski): we should use same c++ version as Android, which is c++11,
# but we use some c++14 features. Uncomment when this get fixed in code.:
    "-std=c++1y",
    "-fno-exceptions",
  ]

  defines = [
    "_FORTIFY_SOURCE=2",
    "_GNU_SOURCE",
    "HAS_NO_BDROID_BUILDCFG",
    "LOG_NDEBUG=1",
    "EXPORT_SYMBOL=__attribute__((visibility(\"default\")))",
    "KERNEL_MISSING_CLOCK_BOOTTIME_ALARM=TRUE",

    # This is a macro to that can be used by source code to detect if the
    # current build is done by GN or via Android.mk. This is a temporary
    # workaround until we can remove all Android-specific dependencies.
    "OS_GENERIC",
    "MTK_COMBO_SUPPORT",
    "HAVE_SYS_UIO_H",
  ]
}

config("pic") {
  cflags = [ "-fPIC" ]
}

config("gc") {
  ldflags = [ "-Wl,--gc-sections" ]
}
