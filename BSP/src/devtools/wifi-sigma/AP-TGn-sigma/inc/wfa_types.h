/****************************************************************************
 *  (c) Copyright 2007 Wi-Fi Alliance.  All Rights Reserved
 *
 *
 *  LICENSE
 *
 *  License is granted only to Wi-Fi Alliance members and designated
 *  contractors ($B!H(BAuthorized Licensees$B!I(B)..AN  Authorized Licensees are granted
 *  the non-exclusive, worldwide, limited right to use, copy, import, export
 *  and distribute this software:
 *  (i) solely for noncommercial applications and solely for testing Wi-Fi
 *  equipment; and
 *  (ii) solely for the purpose of embedding the software into Authorized
 *  Licensee$B!G(Bs proprietary equipment and software products for distribution to
 *  its customers under a license with at least the same restrictions as
 *  contained in this License, including, without limitation, the disclaimer of
 *  warranty and limitation of liability, below..AN  The distribution rights
 *  granted in clause
 *  (ii), above, include distribution to third party companies who will
 *  redistribute the Authorized Licensee$B!G(Bs product to their customers with or
 *  without such third party$B!G(Bs private label. Other than expressly granted
 *  herein, this License is not transferable or sublicensable, and it does not
 *  extend to and may not be used with non-Wi-Fi applications..AN  Wi-Fi Alliance
 *  reserves all rights not expressly granted herein..AN 
 *.AN 
 *  Except as specifically set forth above, commercial derivative works of
 *  this software or applications that use the Wi-Fi scripts generated by this
 *  software are NOT AUTHORIZED without specific prior written permission from
 *  Wi-Fi Alliance.
 *.AN 
 *  Non-Commercial derivative works of this software for internal use are
 *  authorized and are limited by the same restrictions; provided, however,
 *  that the Authorized Licensee shall provide Wi-Fi Alliance with a copy of
 *  such derivative works under a perpetual, payment-free license to use,
 *  modify, and distribute such derivative works for purposes of testing Wi-Fi
 *  equipment.
 *.AN 
 *  Neither the name of the author nor "Wi-Fi Alliance" may be used to endorse
 *  or promote products that are derived from or that use this software without
 *  specific prior written permission from Wi-Fi Alliance.
 *
 *  THIS SOFTWARE IS PROVIDED BY WI-FI ALLIANCE "AS IS" AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS FOR A.AN PARTICULAR PURPOSE,
 *  ARE DISCLAIMED. IN NO EVENT SHALL WI-FI ALLIANCE BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, THE COST OF PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 *  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE) ARISING IN ANY WAY OUT OF
 *  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ******************************************************************************
 */
 /* Revision History:
  *             11/07/07 02.30 Voice HSO -- qhu
  *                  -- change FALSE to -1 -- a bug reported by rmaeder
  *                     socket may be a 0
  */

/*
 * wfa_types.h:
 *   Defines general types and enum 
 */
#ifndef _WFA_TYPES_H
#define _WFA_TYPES_H 

#define WFA_IF_NAME_LEN 16
#define WFA_VERSION_LEN 32
#define WFA_SSID_NAME_LEN 64
#define WFA_IP_ADDR_STR_LEN  16
#define WFA_IP_MASK_STR_LEN  16
#define WFA_MAX_DNS_NUM      2
#define WFA_MAC_ADDR_STR_LEN 18
#define WFA_PROGNAME_LEN 8
#define WFA_DRIVER_CONF_LEN 64
#define WFA_HOSTAPD_CONF_LEN 64
#define WFA_HOSTAPD_CTRL_INF_LEN 64
#define WFA_HOSTAPD_BIN_PATH_LEN 64

#define WFA_CLI_CMD_RESP_LEN 128
#define WFA_P2P_DEVID_LEN 18
#define WFA_P2P_GRP_ID_LEN 128
#define WFA_WPS_PIN_LEN 256
#define WFA_PSK_PP_LEN	256

#define WFA_WFD_SESSION_ID_LEN 64


#define IF_80211   1
#define IF_ETH     2

/* WMM-AC APSD defines*/
#ifdef WFA_WMM_AC
#define DIR_NONE  0
#define DIR_UP    1
#define DIR_DOWN  2
#define DIR_BIDIR 3
#endif

typedef unsigned short WORD;
typedef unsigned char BYTE;

enum _response_staus
{
       STATUS_RUNNING = 0x0001,
       STATUS_INVALID = 0x0002,
       STATUS_ERROR = 0x0003,
       STATUS_COMPLETE = 0x0004,
};

typedef int BOOL;

#ifndef    TRUE
    #define    FALSE       -1
    #define    TRUE        0
    #define    DONE        1
#endif

typedef enum returnTypes
{
   WFA_SUCCESS = 0,
   WFA_FAILURE = 1,
   WFA_ERROR = -1,
} retType_t;

enum wfa_state
{
   WFA_DISABLED = 0,
   WFA_ENABLED = 1,
   WFA_OPTIONAL = 1,
   WFA_REQUIRED = 2,
   WFA_F_REQUIRED = 3,            /* forced required */
   WFA_F_DISABLED = 4,            /* forced disabled */
   WFA_INVALID_BOOL = 0xFF
};

enum SW_TEST_MODE_SIGMA {
    ENUM_SW_TEST_MODE_NONE = 0,
    ENUM_SW_TEST_MODE_SIGMA_AC = 0x1,
    ENUM_SW_TEST_MODE_SIGMA_WFD = 0x2,
    ENUM_SW_TEST_MODE_CTIA = 0x3,
    ENUM_SW_TEST_MODE_SIGMA_TDLS = 0x4,
    ENUM_SW_TEST_MODE_SIGMA_P2P = 0x5,
    ENUM_SW_TEST_MODE_SIGMA_N = 0x6,
    ENUM_SW_TEST_MODE_SIGMA_HS20_R1 = 0x7,
    ENUM_SW_TEST_MODE_SIGMA_HS20_R2 = 0x8,
    ENUM_SW_TEST_MODE_SIGMA_PMF = 0x9,
    ENUM_SW_TEST_MODE_SIGMA_WMMPS = 0xA,
    ENUM_SW_TEST_MODE_SIGMA_AC_R2 = 0xB,
    ENUM_SW_TEST_MODE_SIGMA_NAN = 0xC,
    ENUM_SW_TEST_MODE_SIGMA_AC_AP = 0xD,
    ENUM_SW_TEST_MODE_SIGMA_N_AP = 0xE,
    ENUM_SW_TEST_MODE_SIGMA_WFDS = 0xF,
    ENUM_SW_TEST_MODE_SIGMA_WFD_R2 = 0x10,
    ENUM_SW_TEST_MODE_SIGMA_LOCATION = 0x11,
    ENUM_SW_TEST_MODE_SIGMA_TIMING_MANAGEMENT = 0x12,
    ENUM_SW_TEST_MODE_SIGMA_WMMAC = 0x13,
    ENUM_SW_TEST_MODE_SIGMA_VOICE_ENT = 0x14,
    ENUM_SW_TEST_MODE_NUM
};

enum DRIVER_GEN {
    ENUM_DRIVER_GEN_2,
    ENUM_DRIVER_GEN_3,
    ENUM_DRIVER_GEN_4,
    ENUM_DRIVER_GEN_4m,
    ENUM_DRIVER_GEN_NUM,
};

struct wfa_dut {
    char ap_inf_name[WFA_IF_NAME_LEN];
    char ap_ip_addr[WFA_IP_ADDR_STR_LEN];
    char ap_ip_netmask[WFA_IP_MASK_STR_LEN];
    char ap_hostapd_bin_path[WFA_HOSTAPD_BIN_PATH_LEN];
    char ap_hostapd_ctrl_inf[WFA_HOSTAPD_CTRL_INF_LEN];
    char ap_hostapd_conf[WFA_HOSTAPD_CONF_LEN];
    char ap_hostapd_conf_bk[WFA_HOSTAPD_CONF_LEN];
    char driver_conf[WFA_DRIVER_CONF_LEN];
    int program;
    int chip_id;
    int ieee80211n_enabled;
    int ieee80211ac_enabled;
    enum DRIVER_GEN driver_gen;
    int enable_driver_more_log;
};

#endif
